    Cucumber Backgrounder
    Or: How I Lerned to Stop Worrying and Start Behaving
    
    Введение

Cucumber это инструмент, который осуществляет проектирование рабочего процесса на основе поведения(Behaviour Driven Design (BDD) workflow). Этот документ имеет дело в основном первоначальную настройку и первое использование Cucumber-Rails и Cucumber Rubygems. На это в качестве основы потребуется инфраструктура вэб приложения Ruby on Rails (RoR). Подробное обсуждение BDD, TDD и Panic Driven Development может быть найдене повсюдю. Конечно, существуют некоторые скептики по этой полной Agile материалу, но если вы читаете это, то вы возможно не являетесь одним из них.

Вы убедитесь что некоторое знакомство с Ruby языком является полезным и несколько меньше, знакомство с RoR инфраструктурой. Эта статья рассчитана на новичка и потому несколько длинная. Если вы знакомы с BDD/TDD идеями или являетесь опытным Rubist некоторые идею вам покажутся такими очевидными на вопрос их полезности. Остальные, в особенности те новички в Ruby, могут не иметь ваших преимуществ и этот материал предназначен для этих читателей.

С тех пор как появилась первоначальный вариант этой статьи, Cucumber подвергся повторяющимся исправлениям и рефакторингу. Среди всего этого было разумное решение перенести части зависимые от реализации в определенные(конкретные) программные инфраструктуры - в их собственные gems. В результате, установка Cucumber для инфраструктуры сейчас обычно начинается с установки определенной инфраструктуры Cucumber gem, который в свою очередь тянет за собой ядро Cucumber gem как зависимость. Cucumber предоставляет поддержку для широкого диапазона Ruby VMs, такие как JRuby, альтернативным программным инфраструктурам, такие как Sinatra, другие программные языки такие как Python, среды для тестирования, такие как Capybara и предоставляет поддержку языков i18n для feature and step файлов. Для получение некоторых из этих функциональных возможностей требуется установка дополнительных gems такие как cucumber-sinatra.

Подробности, относящиеся к установке Cucumber Rubygem и реккомендуемые инструменты необходимые для RoR находятся в wiki разделе под заголовком Ruby on Rails. Чтобы экспериментировать с Cucumber и Cucumber-Rails я реккомендую вам создать новый RoR проект и использовать имеющуюся по умолчанию SQLite3 базу данных. Оффициальное руководство Getting Started with Rails является подходящим введением в RoR.

Обратите внимание, что в этом документе я часто использую термины testing и test, где практикующие BDD предпочитают термины behaviour и expectation. Когда я использую слово test в BDD контексте, в действительности я говорю выражая и подтверждая ожидаемое поведение.

Читателям следует всегда считать, что информация содержащаяся здесь может быть не актуальна и таким образом быть неполной и ложной в некотором отношении. Тем не менее, любые такие неисправности будут как правило заключать детали конктретной реализации и не следует сильно принижать правильность всего доклада(выступления).Тем не менее, пожалуйста, примите к сведению везде где вы увидете код как script/generate blah в примерах и замечаниях ниже(далее), синтаксис Rails генератора изменился на rails g blah начиная с RoR v.3.0. Also bear in mind that with post RoR-2 projects bundle exec generally must preface most, if not all, of the command line examples given below.

    С чего начать?
    
Прежде чем приступить будьте уверены что вы правильно установили cucumber-rails в ваш RoR проект. Сейчас мы действительно можем приступить.

    Feature: Design and Build a Ruby on Rails web app using Behaviour Driven Development
    
    In order to reduce rework and produce a web app at low cost and high speed
    A developer
    Should employ a BDD methodology and agile tools
    
    
    Scenario: Cucumber should be installed and configured
    Given I have installed the gem named "rails"
      And I have installed the gem named "cucumber-rails"
      And I have generated a RoR project named "my_project"
      And the present working directory is the Rails root directory of "my_project"
      And I have the file cucumber.yml in the config directory of "my_project"
      And the file cucumber.yml contains a valid default profile
      
    When I run "rails g cucumber"
    
    Then I should create the directory ./features
      And I should create the file ./features/features.feature
      And I should create the directory ./features/step_definitions
      ...
      And I should create the file ./config/environments/environment/cucumber.rb
      And I should create the file ./config/cucumber.yml
      And I should modify ./config/database.yml
      ...
      
 Вышеизложенное является примером формы, которую feature файлы часто принимают(печально; досадно). Эти строки, называемые feature или scenario steps или утверждения, являются пользовательским интерфейсом для осуществления тестирования с Cucumber. То, что дано выше написано в повелительном стиле просто для наглядных целей. Никогда не кладите то, что выглядит таким образом в feature file (но вы будете). На практике, все эти Then/And утверждения следует отнести к одному простому утверждению в декларативном стиле. Например, I should create the Cucumber environment. Беспорядочные детали просто того, что должно заключать в себе Cucumber среда размещается в step definition файлах.
 
Вместо этого, feature должен выглядеть следующим образом:

    Feature: Design and Build a Ruby on Rails web app using Behaviour Driven Development
    
    In order to produce a web app at low cost and high speed
    A developer
    Should employ Ruby on Rails with Cucumber BDD tools
    
    Scenario: Cucumber-Rails should be installed and configured
        Given I am in a rails project root
            And I have installed cucumber-rails
            And I do not have a cucumber environment
        When I run the cucumber-rails generator
        Then I should have a cucumber environment
        
Мы вернемся к тому как писать features и steps позже. Сейчас мы имеем дело с логическим расположением Cucumber файлов в пределах контекста RoR проекта. Корневой уровень первоначального дерева каталогов RoR-4.0 проекта выглядит следующим образом:

    MyProject
    .
        app
        bin
        config
        config.ru
        db
        Gemfile
        Gemfile.lock
        lib
        log
        public
        Rakefile
        README.rdoc
        test
        tmp
        vendor
        
Начиная с Rails-3 и позже, запуск rails generate cucumber:install добавит эту схему в существующую структуру:

    features
        step_definitions
        support
            env.rb
            
Если вы не испольуете Rails и Cucumber-Rails в своем проекте, тогда вы можете достигнуть того же самого создав дерево каталогов из командной строки (mkdir -p features/step_definitons) и по аналогии добавить каталог support (mkdir -p features/support). Люди, возвращающиеся в Cucumber кто знаком с его ранними версиями обнаружат осутствие большинства файлов, которые cucumber-rails used to provide leaving only features/support/env.rb.
Заметный своим отсутствием является features/step_definitions/web_steps.rb. Начиная с версии 1.1.0 you are required to provide all of your web steps from your own resources.(see wayback machine archive). Но старые, запрещенные, step definitions все еще могут быть найдены если вы читаете запись блога по ссылке. Это действительно хорошая идея прочитать содержимое ./features/support/env.rb до того, как делать что-либо с cucumber и снова после каждого обновления cucumber-rails.

Как только структура каталога features будет на месте, тогда мы готовы чтобы начать тестировать с Cucumber.


    Куда необходимо класть Tests?
Cucumber разбивает тестирование на две части, обращенный наружу feature scenario steps и обращенные внутрь step definitions. Features - это описание желаемых результатов (Then) следующие за определенными событиями (When) при предварительно установленных условиях (Given). Они как правило используются c данными, полученными от конечного пользователя, в некоторых случаях, могут быть получены под контролем конечного пользователя( в виде специалиста предметной области). Feature файлам дано расширение .feature.

Step definitions, или stepdefs, являются ключом по своим фрагментам текста от feature scenario утверждений и вызывают блоки Ruby on Rails кода, который обычно содержит api методы операторов контроля из какой-либо тестовой системы, которую вы установили (MiniTest/TestUnit, RSpec, Shoulda, и т.д.). Учитывая что, Cucumber изначально развился из RSpec stories неудивительно что Cucumber-Rails генератор разок допускает, что RSpec доступен. This has long since ceased to be the case. Что сейча делает generator это проверяет установлен ли RSpec gem. Если да, то rails generator создает файлы окружения, чтобы использовать его, если нет, то он игнонирует RSpec и настраивает test-unit. В действительности доступность различный опций увеличивается со временем. Для того, чтобы увидеть что доступно в текущей версии Cucumber-Rails используйте команду: rails g cucumber:install --help или script/generate cucumber --help.

Особым источником возможной путаницы является то, что термин steps, когда используется в общих чертах, имеет два (явно связанных, но существенно различающихся) значения, зависимые от контекста. 

Внутри *.feature файлов, steps являются текстовое описание какая форма тела сценария. Они начинаются с ключевыми словами Given, When, Then, And или But ( обратите внимание, что применение заглавных букв пяти имен являются важным). Альтернативный вариант, можно просто использовать символ * чтобы указать место любого из вышеупомянутого.

    Scenario: Cucumber should be installed and configured
    Given I have installed the gem named "rails"
        * I have installed the gem named "cucumber-rails"
        * I have generated a RoR project named "my_project"
        
    ...
    
Внутри step_definitions.rb файла, steps (которые строго говоря должны всегда называться step definitions и сейчас часто называются stepdefs или даже defs) ссылаются на matcher методы(методы совпадателя), которым могут быть даны любые из нескольких имен (Given, When, Then, And or But), каждый сопровождается с matcher "string" или /regexp/ что соответствует одному или более feature steps. Обратите внимание что имя метода не входит в состав matcher-а. Given предложение из feature, может соответстовать When step definition mather.Со временем, предложения из feaures стали называть просто как features, в то время как steps сейчас ссылаются почти исключительно на step definitions.

Как показано выше, сгенерированное дерево features/ является довольно не глубокой. Можно положить каждую функциональную возможность в простой(отдельный) файл в каталог features/, и каждый step в отдельный файл в каталог step_definitions/ (или даже в сам features/ каталог), если кто-то так решит. В ином случае, кто-то выберет иметь один или более feature файлов для каждой функциональной возможности, вместе с одним или более step файлами для каждого feature файла или сочетание их.

Тем не менее, Cucumber создан с гибокстью для того, чтобы поддерживать намного больше выразительных структур каталога. Например:

    features
        entities
            entity.feature
            step_definitions
                anything.rb
                entity_steps.rb
        locations
            location.feature
            step_definitions
                location_steps.rb
        sites
            step_definitions
        step_definitons
            local_assert_steps.rb
            local_crud_response_steps.rb
            local_email_steps.rb
            local_file_steps.rb
            local_script_steps.rb
            local_steps.rb
            local_web_steps.rb
            local_xml_file_steps.rb
        support
            env.rb
            local_env.rb
            local_transform.rb
            
В этом случае первоначальная установка разделена на подкаталоги, придана форма тестирование в основе модели. Можно с таким же успехом разбить в иерархию model/view/controller:

    features
        models
            entities
                entity.feature
                step_definitions
                    anything.rb
                    entity_steps.rb
        views
            entity_new
            step_definitions
                entity_new_steps.rb
        step_definitions
            local_steps.rb
        support
            env.rb
            local_env.rb
            local_transforms.rb
            
или это

    features
        invoicing.feature
        product.feature
        step_definitions
            local_steps.rb
            model_steps.rb
            service_steps.rb
            web_steps.rb
        user.feature
        user_auth.feature
        
Считается anti-pattern связывать step_definition файлы с конкретным feature файлом. Т.к. для многих (большинства?всех?) программируемых предложениях существуют исключения и противоположные мнения относящиеся к общепринятой позиции на практике.

Тем не менее, на начальном этапе лучше всего следовать реккомендации избегать feature-specific step-definition файлы. Впоследствии вы можете отступить от этого, но только когда вы будете достаточно опытными, чтобы оценить компромисс между подходами. Необходимо отдавать себе полный отчет, независимо от используемой структуры каталога, Cucumber эффективно делает одноуровневым дерево каталогов features, когда запускает тесты. К тому же, я имею ввиду, что все что оканчивается на .rb под местом(точкой) запуска Cucumber, при запуске (случай по умолчанию) или указанной опции -r осуществляется поиск соответствий функциональной возмжности(feature matches).
Таким образом, step содержащийся в  features/models/entities/step_definitions/anything.rb может использоваться в feature файле содержащийся в features/views/entity_new, при условии что Cucumber вызывается под root каталогом, который является общим для обоих, ./features в этом случае; или явно требуется в командной строке, $ cucumber -r ./features features/views/entity_new. Запомните, что step definition файлы могут называться как угодно, поскольку они оканчиваются на .rb и это что угодно оканчивающееся на .rb где-либо под корневым каталогом Cucumber, при запуске будет восприниматься как step definition файл.       
      
Обратите внимание, что если -r опция передана, тогда ТОЛЬКО в этом дереве каталога будет осуществляться поиск step definintion соответствий. Можно указать опцию -r несколько раз, если вам нужно включить step definitions из каталогов, которые не следуют общепринятому(традиционному) маршруту(пути).  

    Как писать Тесты?
    
Создавая эти первые тесты, или функциональные возможности так, как предпочитают приверженцы чистоты BDD, часто в сопровождении того, что может только быть описано как творческий кризис. Вопрос "С чего начать?" кажется будет определенной помехой для некоторых. Если вы у вас действительно нет идеи с чего начать, тогда я предполагаю, что 
вы считате, что вы пишете предоположительно вэб приложение и что первоначальной точкой соприкосновения между приложением и пользователем является стартовая страница(домашняя страница). Вы можете сделать хуже, просто начав с :

    Feature: An application to do whatever
      In order to generate revenue
      The users
      Should be able to visit our web site
      
    Scenario: The application has a home page
      Given I do have a web application
      When I visit the home page
      Then I should see the home page

Когда-то, давным давно самым легким инструментом для того чтобы сделать впервые тестировщику/специалисту по поведению было использование встроенноего scaffold генератора Cucumber для того, чтобы создать feature scaffold для каждой новой желаемой функциональной возможности и изменить резлуьтирующие файлы для удовлетворения требованиям.

    script/generate feature Frooble name color description
        exists features/step_definitions
        create features/manage_froobles.feature
        create features/step_definitions/frooble_steps.rb
        
Это был самый легкий способ сделать все это, но не был самым лучшим способом. По-моему опыту, framework-generated scaffolds всех типов не предоставляют новому пользователю ничего кроме комфортной иллюзии того, что происходит прогресс со множеством шаблонного кода. И слишком часто, генерируемый код являлся бесполезным, для всех намерений и целей ( сохраняется только как пример правильного синтаксиса и даже тогда, синтаксис часто является сомнительного качества).

В любом случае весь смысл BDD заключается в том, что жизненно важно писать каждый test/feature сценарий один stepdef за раз, предпочтительно с экспертом предметной области, и на обычном языке. В BDD мире нет смысла начинать с feature scaffolding генератора. Этот факт в итоге привел к удалению feature генератора из cucumber-rails. Сейчас, также как step definitions, вы должны писать свой собственный код ( или украсть чей-нибудь) с самого начала.

Использование обычного языка в feature файле является критическим для успешного использования Cucumber. Что означает "обычный язык"? В основном, все сводится к указанию результата, который вы желаете получить, избегая то, как вы ожидаете получить его. Подробное обсуждение написание конструкций feature и steps представлены в другом месте.
(Смотрите, Given-When-Then и Telling a Good Story).

Например, для сценария аудентификации вам следует написать:

    When "Bob" logs in
    
а не:

    Given I visit "/login"
    When I enter "Bob" in the "user name" field
      And I enter "tester" in the "password" field
      And I press the "login" button
    Then I should see the "welcome" page
    
What is important about the difference in styles? Первый пример, When "Bob" logs in - функциональное требование. Второй, более длинный, является процедурным.
Функциональные требования являются функциональными возможностями, а процедурам принадлежат детали реализации. Иронично, учитывая склонность использовать слово should в BDD/TDD, люди, говорящие на чистом английском языке рекомендуют использовать must вместо should или shall.

В feature файлах, на чем вы и ваши клиенты должны обратить внимание это какой событие должно произойти, не то, что вы ожидаете.Таким образом когда кто-то позже решает эту задачу и является устаревшей схема аудентификации тогда вам просто необходимо изменить steps процесса аудентификации. Ваши внешние feature файлы - то, что ваши клиенты увидят - не должны меняться совсем. В действительности, хороший вопрос чтобы спросить себя, когда пишете feature предложение: Нужно ли изменить фразу, если изменится реализация?

Если ответ "Да", тогда предложение является плохо написанным, и вам следует исправить, избегая детали зависящие от реализации. Как побочный эффект, в результате ваши сценарии будут короче и гораздо проще для сопровождения и понимания.

После каждого нового добавленного в сценарий feature утверждения, вам следует незамедлительно создать соответствующий step definition метод. Это то место куда кладутся детали реализации, при нормально ходе событий, ваши пользователи никогда не увидят их. Как только новый step definition написан, тогда вы должны убедиться, что он неудачно завершается при запуске все еще не существующего кода приложения. Тогда (и только тогда) вам следует написать самую малую часть кода приложения, для успешного завершения test/step definition.

Тогда, когда у вас есть успешный step, без изменения логики step definition, измените критерии(условия) испытаний, таким образом, чтобы что-то не смогло произойти и убедитесь, что он неудачно завершился снова. Как только вы убедите себя, что ваш test успешно завершился по правильным причинам, тогда сбросьте критерии таким образом, чтобы тест успешно завершился снова. Как только этот цикл является завершенным, перейдите к следующему feature предложению.

Например:

    Scenario: Users can enter and invoice item
      ...
      Then I enter a product quantity of 5
      
Сейчас, незамедлительно идете к step_definitions файлу и сделай это:

    When /enter a product quantity of (\d+)/ do |quantity|
      pending "TODO: Do we need to have a product code passes as well?"
    end
    
Подумайте о том, как вы собираетесь выразить это поведение в своем приложении и как вы можете определить, что оно произошло. Вернитесь и доработайте feature и step до того, как вы будете удовлетворены тем, что он в самом деле будет производить некоторые пригодные результаты и то, что тест неудачно завершится.

Сейчас, можно идти писать код для того, чтобы реализовать эти требования в приложении.

Заманчиво, иногда так неудержимо сразу перейти к этапу анализа в одиночку и завершить так много features, scenarious и scenario statements сколько можно представить. В некоторых случаях, ограниченный доступ к эксперту предметной области и конечные пользователи могут потребовать взять на себя обязательства того, что многие features со своими деталями будут завершены задолго до написания ассоциированных step definitions. Когда есть возможность этого избежать, то следует избежать этого и когда этого невозможно избежать, тогда должна предприниматься каждая попытка чтобы избежать этого все же. В конечном итоге, самые лучшие результаты достигаются, когда вы пишите feature утверждения и step definitions постепенно, используя абсолютный минимум кода, чтобы выразить требования. Сразу реализуйте новый step требование в приложении используя абсолютный минимум кода, который будет удовлетворять этому.

Вам следует, в действительности, воспринимать эту часть слегка как игру. Код приложения, который вы пишете должен буквальны быть минимумом того, что будет удовлетворять требованию( особенно, если этот код является полностью непригодным для продакшн среды). Таким образом, вы вынуждены добавить дополнительные feature сценарии, чтобы прогнать действительно то, что является приемлемым. Эта сила давления кода приложения для того, чтобы строго развивать то, что удовлетворяет этим требованиям. Это может показать нелепым/глупым и пустой тратой времени, но если вы опередите процесс проектирования написав больше сложного кода чем требуется,тогда вы неминуемо будете не в состоянии охватить сценариями некоторые из этого кода. Вы также напишете код, который никогда не будет использоваться. Это случится и вы ощутите негативные последствия в некотором месте. Придерживайтесь YAGNI принципа все время.

Это тяжелое наказание, чтобы придерживаться ее, но полезность этого подходта в том, что вы редко(никогда) не будете иметь не протестированный код где-либо в вашем приложении. Более важно, если вы строго придерживаетесь этой методологии, тогда ваше приложение будет содержать минимум кода, котырй удовлетворяет требованиям features. Это часто является упущенной из виду или недооцененным соображением, которое содействует эффективному написанию кода, надежности результирующего кода, и производительности результирующей программы. Избегая отклонений при написании что технически интересно, но финансово бессмысленно сосредотачивать ваши ограниченные ресурсы на задачах, которые учитывают и значительно уменьшают в целом сложность проекта. Всякий раз, когда вы окажетесь на этой садовой дорожке ведущей к расползающимся featuritis растениям спросите: ЕСЛИ ПОЛЬЗОВАТЕЛЬ НЕ ПРОСИЛ ЭТОГО, ТОГДА ТОЧНО ЗАЧЕМ МЫ ПИШЕМ ЭТО?

Строго следуя этому подходу позволяет тебе осуществлять существенные изменения в проектировании (и обновлению gem) с полной уверенностью. Написав код для повторного выполнения измерений вы находитесь в безопасности зная, что если неожиданные изменения где-либо в проекте сломают что-либо, тогда вы будете знать об этом незамедлительно через запуск вашего набора тестов.( Которые всегда запускаются, верно? ВЕРНО?) Более важно, вы будуте знать точно что сломалось и где.

Как это бывают с большинством профессионалов, реальную важность(значение) которую предоставляют квалифицированные программисты зависит не столько в знании как сделать что-то, как знание того, когда и где это должно быть сделано. Реальная проблема с сопровождением кода является просто изучение какую часть кода изменить. Нахождение точного места в приложении, которое нуждается во внимании является обычно самой большой проблемой сопровождения. Силами строго написания кода features поддерживаемые соответствующими step definitions вы можете просто упростить задачу почти до очевидности. В случае того, что время от времени, вы предвидите feature steps (и мы все делаем это однако сколько бы мы не старались) тогда обходиться без matcher для них в step definition файлах, приводит к тому, что эти steps силами(средствами) cucumber будут сообщены пользователю как отсутствующие. Cucumber не только извещает об этом, с целью помочь он предоставляет предполагаемый step matcher и аргумент для реализации. Если вы прекращаете написание stub step matchers до момента полной реализации, тогда у вас имеется pending метод доступный для того, чтобы указать определенный, но pending/unspecified/stub step definitions. pending метод необходим для указания дополнительного сообщения. Step definitions содержащие pending метод будут отображаться как определенные, но ожидающие выполнения при запуске cucumber и будут выводить любое сообщение, которое вы предоставите. 

    Given /this step is not implemented yet/ do
      pending "your message goes here"
    end

Кстати, никогда, никогда не пишите step definition для предложений, которые еще не присутствуют в одном из features. Большинство таких step definitions окажутся неиспользуемым хламом, который кем-то в конце концов 
окажутся удаленными. И любые из тех, которые не окажутся удаленными необходимы доработки, когда они в результате применяются. Самое лучшее подождать до необходимости каждого step definition быть очевидными и неотложными. 

    Что такое Features и Scenarious?

Feature можно представить как неделимую единицу функциональной возможности встроенной в проект, к которому она принадлежит. Например, задача аудентификации и реакция пользовательского интерфейса как правило считается функциональной возможностью, в то время как полная система идентификации обязательно заключает в себе массу функциональных возможностей. Отдельная функциональная возможность (Feature) как правило содержится в своем собственном файле (оканчивающийся на .feature). Каждая функциональная возможность (Feature) как правило определяет (детализирует) хотя бы несколько сценариев (Scenarious).
    
Scenario является блоком утверждений внутри feature файла, который описывает некоторое желаемое или не реккомендуемое(запрещенное) поведение. Для требуемых ответов сценарий (scenario) может проверять предоставляемые
интерфейсом логина поля ввода, неудачные попытки логируются или же о них сообщается пользователю, id которого является заблокированным после нескольких неудачных попыток и так далее. Каждый сценарий выполняет код реализации чтобы удостовериться в том, что для каждого предполагаемого условия в самом деле происходит ожидаемое поведение. Напомним что эти сценарии указывают Что (What) и следует избегать ответа на вопрос: Как?(How)

Каждый сценарий состоит из трех классов утверждений, Given, When и Then, которые эффективно разделяют каждый сценарий на три стадии(stage). Каждый стадия сценария состоит из одного или более утверждений, которые используются чтобы соответствовать, чтобы проверять step definitions. Общепринятым оформлением является :


    Feature: Some terse yet descriptive text of what is desired (Отчасти краткий, но описательный текст того, что желательно
    
    In order that some business value is realized ( Для того чтобы реализовать бизнес требование)
    An actor with some explicit system role ( действующему лицу с некотороя явной системной ролью)
    Should obtain some beneficial outcome which furthers the goal ( следует получить некоторые полезные результаты, которые способствуют достижению цели )
    To Increase Revenue | Reduce Costs | Protect Revenue (pick one) ( для увеличения доходов | снижение издержек | защиты доходов (выберите один) )
    
    Scenario: Some determinable business situation
        Given some condition to meet
            And some other condition to meet
        When some action by the actor
            And some other action
            And yet another action
        Then some testable outcome is achived
            And something else we can check happend too
            
    Scenario: A different situation
    
Для Cucumber features, ключевыми словами, используемыми тут являются Feature, Scenario, Given, When, Then и And. Feature используется для определения тестируемой группы, когда публикуются результаты.

В настоящее время (2014 Feb 26) оператор Feature и его описательный блок текста не используется Cucumber за исключением идентификации (при публикации результатов) и документирования. Тем не менее, оператор Feature возможно содержит самую важную часть информации, содержащуюся в feature файле. Здесь это твой ответ на вопрос того почему эта работа ведется. И если у тебя нет очень хорошей, оправданной причины, которую можно ясно(четко) объяснить в нескольких предложениях, тогда тебе возможно не следует расходовать силы на это функциональное требование совсем. Прежде всего BDD должен иметь некоторе конкретное business value (бизнес требование), реализация которой поддается измерению до того как ты напишешь одну строчку кода. ( see popping the why? stack)

Как и в случае с Feature, Scenario используется только для определения(идентификации), когда публикуются ошибки и для документирования части работы. Предложения (steps) которые образуют сценарий (Scenario) каждый начинается с: Given, When, Then, And и But ( и иногда *). Все они ключевые слова Gherkin/Cucumber методы, которые принимают аргументы строки которые следуют после ключевых слов. Они являются steps, которые Cucumber будет публиковать при успешном, неудачном или ожидании выполнения основанный на результатах соответствующих step matcher-ах(сопоставителях) в файлах step_definitions.rb. Пять ключевых слов (и *) являются равноценными друг другу и полностью взаимозаменяемы.


        Что такое Step Definitions?

Строка следюущая за ключевым словом в feature файле является сравниваемой со всеми matchers(сопоставителями) содержащимися во всех загруженных файлах step_definitions.rb. Step definition очень похоже на это:

    Given /there are (\d+) froobles/ do |n|
      Frooble.transaction do
        Frooble.destroy_all
        n.to_i.times do |n|
          Frooble.create! :name => "Frooble #{n}"
        end
      end
    end

Важными элементами здесь являются метод (Given), принимающий в качестве аргументов regexp ограниченное / ( также заключенное в кавычки "single string" может использоваться вместо /) и этот matcher(сопоставитель) метод, за которым следует блок. Другими словами, написанный по-разному в Ruby этот matchar method мог бы выглядет следующим образом:

    Given( /there are (\d+) froobles/ ) { |n|
      ...
    }

Кроме того, это означает, что step definition method blocks получают в качестве своих аргументов строковые значения. Поэтому n.to_i.times и не просто n.times (но также взглянуть на Cucumber преобразования). Это также означает что за самими step matchers могу следовать специальные regexp модификаторы, такие как i, если вы хотите избежать проблем включающие преобразование в верхний регистр.

В feature примере представленном выше, имелось утверждение сценария: And some other action. Это могло бы соответствовать любому из следующих step definitin matchers если присутствовать в любом step_definion.rb файле, найденном в корневом каталоге features.

    Given /some other action/ do
    Then "some other action" do
    When /some other Action/i do
    When /some other (Action)/i do |action|
    Then /(\w+) other action/i do |prefix_phrase|
    Given /(\w+) other (\w+)/i do |first_word, second_word|
    But /(\w+) Other (.*)/i do |first_word, second_phrase|
    And /(.*) other (.*)/i do |first_phrase, second_phrase|
    
The step definition match(сопоставление) зависит только от шаблона, заданного как аргумент переданного в Given/When/Then метод и не от самого step method имени. Поэтому я выбрал практический подход только используя When /I have a match/ do в своих step definition файлах, т.к When имеет более естественный вид для меня, как matcher-а. Другие находят слово "Given" имеет более естественное чувство языка в этом контексе.

Если Cucumber находит больше одного matcher-а во всех step definitions файлах, тогда соответствующее утверждение сценария "возмущается" о том, что он нашел несколько step definition matches для этого step и вынуждает вас отличить их. Вы можете дать указания Cucumber просто выбрать один из кандидатов(вариантов) вместо передачи --guess опции в командной строке.

Как некоторые считают лучшая форма окружить(заключить) в двойные кавычки, " ", все элементы в feature step предложениях, которые означают, что они должны быть приняты как значения переменных переданных в step definition. Это просто соглашение. Тем не менее, если вы решили придерживаться этой дороги, тогда вы должны привести в соответствие все step definition matchers если символы " сейчас являются частью literal matcher string. Например:

Feature statement:

    Given some determinable "business" situation
    
step definition

    When /determinable "(.*)" situation/ do |s|
    
Под конец, у вас могут быть step definitions, которые вызывают другие step defintions, включая те, которые содержатся в других step definitions файлах. Это один из способов( не реккомендуется), с помощью которого вы можете указать процедурные детали, объединяя(смешивая) другие steps. Например:

    When /some "(.*)" action/ do |act|
      ...
    end
    
    When /in an invoiced non-shipped situation/ do
      step( "some \"invoiced\" acton" )
      step( "some \"non-shipped\" action" )
      ...
    end
    
    
